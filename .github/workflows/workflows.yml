name: Books Service CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Record start time
        run: echo "Start Time:$(date -Iminutes)" > /tmp/log.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: ./BooksService
          file: ./BooksService/Dockerfile
          tags: books:latest
          outputs: type=docker,dest=/tmp/image.tar

      - name: Check build status
        if: success()
        run: echo "image successfully built" >> /tmp/log.txt
      - name: Log build failure
        if: failure()
        run: echo "image not able to be built" >> /tmp/log.txt 
 
      - name: Upload Docker image and log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: books
          path: /tmp/image.tar

      - name: Upload log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: /tmp/log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image and log
        uses: actions/download-artifact@v4    

      - name: Load Docker image
        run: docker load --input books/image.tar

      - name: Download log artifact
        uses: actions/download-artifact@v4
        with:
          name: log
          path: /tmp

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d

      - name: Check run status
        id: check_status
        run: echo "Container up and running" >> /tmp/log.txt

      - name: Log run failure
        if: failure()
        run: |
          echo "Container failed to run" >> /tmp/log.txt
          exit 1

      - name: Check container status
        run: docker ps

      - name: Set up Python
        if: steps.check_status.outcome == 'success'
        uses: actions/setup-python@v4
    
      - name: Install dependencies
        if: steps.check_status.outcome == 'success'
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Wait until service is up
        run: |
          for i in {1..10}; do
            curl -s http://localhost:5000/books && break
            echo "Waiting for service..."
            sleep 3
          done

      - name: Run tests
        if: steps.check_status.outcome == 'success'
        run: |
          pytest -v ./tests/tests.py > tests_results.txt

      - name: Check pytest status
        if: steps.check_status.outcome == 'success' && success()
        run: echo "tests succeeded" >> /tmp/log.txt

      - name: Log pytest failure
        if: steps.check_status.outcome == 'success' && failure()
        run: echo "tests failed" >> /tmp/log.txt

      - name: Upload test results 
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: |
            tests_results.txt  

      - name: Upload log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: /tmp/log.txt
          overwrite: true
            
      - name: Tear down Docker Compose
        run: docker compose -f docker-compose.yml down
